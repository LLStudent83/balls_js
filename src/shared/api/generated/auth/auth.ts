/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Bouncing Balls API
 * Bouncing Balls game API
 * OpenAPI spec version: 1.0
 */

import type {
	MutationFunction,
	QueryClient,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";
import { customInstance } from "../../custom-instance";
import type { LoginDto, RegisterDto } from "../bouncingBallsAPI.schemas";

/**
 * @summary Register user
 */
export const authControllerRegister = (
	registerDto: RegisterDto,
	signal?: AbortSignal,
) => {
	return customInstance<void>({
		url: `/api/auth/register`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: registerDto,
		signal,
	});
};

export const getAuthControllerRegisterMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof authControllerRegister>>,
		TError,
		{ data: RegisterDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof authControllerRegister>>,
	TError,
	{ data: RegisterDto },
	TContext
> => {
	const mutationKey = ["authControllerRegister"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof authControllerRegister>>,
		{ data: RegisterDto }
	> = (props) => {
		const { data } = props ?? {};

		return authControllerRegister(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type AuthControllerRegisterMutationResult = NonNullable<
	Awaited<ReturnType<typeof authControllerRegister>>
>;
export type AuthControllerRegisterMutationBody = RegisterDto;
export type AuthControllerRegisterMutationError = unknown;

/**
 * @summary Register user
 */
export const useAuthControllerRegister = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof authControllerRegister>>,
			TError,
			{ data: RegisterDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof authControllerRegister>>,
	TError,
	{ data: RegisterDto },
	TContext
> => {
	const mutationOptions = getAuthControllerRegisterMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Login
 */
export const authControllerLogin = (
	loginDto: LoginDto,
	signal?: AbortSignal,
) => {
	return customInstance<void>({
		url: `/api/auth/login`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: loginDto,
		signal,
	});
};

export const getAuthControllerLoginMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof authControllerLogin>>,
		TError,
		{ data: LoginDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof authControllerLogin>>,
	TError,
	{ data: LoginDto },
	TContext
> => {
	const mutationKey = ["authControllerLogin"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof authControllerLogin>>,
		{ data: LoginDto }
	> = (props) => {
		const { data } = props ?? {};

		return authControllerLogin(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
	Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = LoginDto;
export type AuthControllerLoginMutationError = unknown;

/**
 * @summary Login
 */
export const useAuthControllerLogin = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof authControllerLogin>>,
			TError,
			{ data: LoginDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof authControllerLogin>>,
	TError,
	{ data: LoginDto },
	TContext
> => {
	const mutationOptions = getAuthControllerLoginMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
